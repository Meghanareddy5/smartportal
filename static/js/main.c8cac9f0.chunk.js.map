{"version":3,"sources":["logo.svg","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","login","setState","redirectToReferrer","handleChange","event","defineProperty","target","id","value","handleSubmit","preventDefault","state","username","length","react_default","a","createElement","className","Form","onSubmit","Row","Label","htmlFor","md","Col","type","name","placeholder","onChange","Button","block","bsSize","disabled","validateForm","Component","App","loginPage","components_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8OCoEzBC,cAhEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,MAAQ,WACDP,EAAKQ,SAAS,CACXC,oBAAoB,KAZXT,EAoBnBU,aAAe,SAAAC,GACbX,EAAKQ,SAALP,OAAAW,EAAA,EAAAX,CAAA,GACGU,EAAME,OAAOC,GAAKH,EAAME,OAAOE,SAtBjBf,EA0BnBgB,aAAe,SAAAL,GACbA,EAAMM,kBAxBNjB,EAAKkB,MAAQ,CACXC,SAAU,SACVV,oBAAoB,GALLT,8EAiBjB,OAAOG,KAAKe,MAAMC,SAASC,OAAS,mCAcpC,OAAsC,IAAlCjB,KAAKe,MAAMT,mBACJY,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,uBAIdF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,SAAUvB,KAAKa,cACrBK,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKH,UAAU,cACXH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,QAAQ,WAAWC,GAAI,GAA9B,aACAT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAKD,GAAI,GACTT,EAAAC,EAAAC,cAAA,SACES,KAAK,OAAOlB,GAAG,WAAWmB,KAAK,WAC/BC,YAAY,YACZnB,MAAOZ,KAAKe,MAAMC,SAClBgB,SAAUhC,KAAKO,iBAKnBW,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACEC,OAAK,EACLC,OAAO,QACPC,UAAWpC,KAAKqC,eAChBR,KAAK,UAJP,kBAnDUS,aC+BLC,cA3Bb,SAAAA,EAAY3C,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuC,IAChB1C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyC,GAAApC,KAAAH,KAAMJ,KACDmB,MAAM,CACTyB,UAAU,IAHI3C,sHAiBhB,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACjBH,EAAAC,EAAAC,cAACqB,EAAD,eAtBSH,aCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c8cac9f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport {Row,Form,FormFeedback,FormGroup,Label,Input,Button,Col} from 'reactstrap';\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      username: \"Maggie\",\r\n      redirectToReferrer: false\r\n \r\n    };\r\n  }\r\n\r\n  login = () => {\r\n         this.setState({\r\n            redirectToReferrer: true\r\n        });  \r\n  }\r\n\r\n  validateForm() {\r\n    return this.state.username.length > 0 ;\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.id]: event.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.redirectToReferrer === true) {\r\n        return <div><h4> working</h4></div>\r\n      }\r\n\r\n    return (\r\n      <div className=\"Login\">\r\n        <Form onSubmit={this.handleSubmit}>\r\n        <Row className=\"form-group\">\r\n            <Label htmlFor=\"username\" md={2}>User Name</Label>\r\n            <Col md={5}>\r\n            <input \r\n              type=\"text\" id=\"username\" name=\"username\"\r\n              placeholder=\"User Name\"\r\n              value={this.state.username}\r\n              onChange={this.handleChange}\r\n            />\r\n            </Col>\r\n          </Row>\r\n         \r\n          <Button\r\n            block\r\n            bsSize=\"large\"\r\n            disabled={!this.validateForm()}\r\n            type=\"submit\"\r\n          >\r\n            Login\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './components/Login';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      loginPage:[],\n \n    }\n  }\n  componentWillMount(){\n    var loginPage =[];\n    // loginPage.push(<Loginscreen />);\n    // this.setState({\n    //               loginPage:loginPage\n    //                 })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n         <Login />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}